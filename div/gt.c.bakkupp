#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <ncurses.h>
#include <time.h>
#include <string.h>
#include <libtcod.h>

#include "gt.h"
#include "world.h"
#include "display.h"
#include "delve.h"

int px,py;

FILE *debuglog;

cell_t world[XSIZE][YSIZE];
city_t city[150];
city_t village[150];

int cities;
int current_city;
int villages;
int current_village;
int forests;

player_t *player;

void check_location()
{
    int i;

    current_city = current_village = 0;
    for(i=1;i<cities;i++) {
            if((player->x >= city[i].x1))
                    if((player->x <= city[i].x2))
                            if((player->y >= city[i].y1))
                                    if((player->y <= city[i].y2)) {
                                        current_city = i;
                                        i=cities;
                                    }
    }
    
    for(i=1;i<villages;i++) {
            if((player->x >= village[i].x1))
                    if((player->x <= village[i].x2))
                            if((player->y >= village[i].y1))
                                    if((player->y <= village[i].y2)) {
                                        current_village = i;
                                        i=villages;
                                    }
    }
}

void dump_world()
{
	int i,j;
	FILE *f;

	f = fopen("world.dump", "w");
	if(f == NULL) {
		printf("file open error! wtf?\n");
		return;
	}

	for(i=0;i<XSIZE;i++) {
		for(j=0;j<YSIZE;j++) {
			switch(world[j][i].type) {
				case PLAIN:
					fprintf(f, ".");
					break;
				case FOREST:
					fprintf(f, "!");
					break;
				case CITY:
					fprintf(f, "#");
					break;
			}
		}
		fprintf(f, "\n");
	}

	fclose(f);
}


void set_explored(int x, int y)
{
        if(x >= 0)
                if(x <= XSIZE)
                        if(y >= 0)
                                if(y <= YSIZE)
                                        world[y][x].explored = 1;
}

void save_world(char *filename)
{
        FILE *worldfile;
        int i, j;

        worldfile = fopen(filename, "wb");

        for(i=0;i<XSIZE;i++) {
                for(j=0;j<YSIZE;j++) {
                        fwrite(&world[i][j], sizeof(cell_t), 1, worldfile);
                }
        }

        fwrite(player, sizeof(player_t), 1, worldfile);
        for(i=0;i<cities;i++)
                fwrite(&city[i], sizeof(city_t), 1, worldfile);

        for(i=0;i<villages;i++)
                fwrite(&village[i], sizeof(city_t), 1, worldfile);

        fclose(worldfile);
}

int load_world(char *filename)
{
        FILE *worldfile;
        int i, j;

        i = j = 0;
        worldfile = fopen(filename, "r");
        if(worldfile == NULL) {
                printf("Can't load file %s\n", filename);
                return 1;
        }
        
        for(i=0;i<XSIZE;i++) {
                for(j=0;j<YSIZE;j++) {
                        fread(&world[i][j], sizeof(cell_t), 1, worldfile);
                }
        }

        fread(player, sizeof(player_t), 1, worldfile);

        for(i=0;i<cities;i++)
                fread(&city[i], sizeof(city_t), 1, worldfile);

        for(i=0;i<villages;i++)
                fread(&village[i], sizeof(city_t), 1, worldfile);

        fclose(worldfile);
        return 0;
}

int main(int argc, char *argv[])
{
	int wmaxx, wmaxy;
	int command;
	int mapchanged;
    int tx,ty,tmpx,tmpy;

    cell_t **test;
    int i;

	printf("Gullible's Travails v%s starting up...\n", GT_VERSION);
	debuglog = fopen("debuglog", "w");
	srand(getpid());

	player = malloc(sizeof(player_t));
	printf("Initializing world...\n");


    if(argc > 1) {
        if(!strcmp(argv[1], "-l")) {
            printf("Opening world file %s...\n", argv[2]);
            if(load_world(argv[2]))
                return 1;
        }
    } else if(argc == 1) {
        printf("Generating new world...");
    	init_world();
    }

	printf("\ndone.\n");

    printf("Testing dungeon delving...\n");
    test = (cell_t **) calloc(800, sizeof(cell_t));
    for(i=0;i<800;i++) {
            test[i] = (cell_t *) calloc(800, sizeof(cell_t));
    }
    generate_map(800, 800, 3, 8, 0, 0, test);
    printf("done.\n");
    
	printf("Initializing ncurses...");
	init_ncurses();
	printf(" done.\n");

    player->x = mapwidth/2;
    player->y = mapheight/2;
    px = py = 0;

	fprintf(debuglog, "Player starts at %d x %d (COLS %d LINES %d) (px py = %d %d)\n", player->x, player->y, COLS, LINES, px, py);
	
	getmaxyx(wmap, wmaxy, wmaxx);

//	player->x = px + (wmaxx/2);
//	player->y = py + (wmaxy/2);

    set_explored(player->x, player->y);
    set_explored(player->x+1, player->y);
    set_explored(player->x-1, player->y);
    set_explored(player->x, player->y+1);
    set_explored(player->x, player->y-1);
	
    fprintf(debuglog, "player at %d %d\n", player->x, player->y);

	draw_world(px, py, player->x, player->y, wmaxx, wmaxy);
	//draw_player(player->x, player->y, wmaxx, wmaxy);
	update_info(px, py);
	wnoutrefresh(wmap);
	wnoutrefresh(wstat);
	wnoutrefresh(winfo);
	doupdate();

	while(1) {
	       	/* main loop */
		command = wgetch(wmap);
		mapchanged = 0;


		switch(command) {
			case ERR:
				break;
			/*case KEY_RESIZE:
				resize_all_windows();
				break;*/
            case 'd':
                /* let's test the dungeon map */
                for(tmpy=0;tmpy<800;tmpy++) {
                        for(tmpx=0;tmpx<800;tmpx++) {
                                world[tmpy][tmpx].type = test[tmpx][tmpy].type;
                                world[tmpy][tmpx].explored = 1;
                                /*if(world[tmpy][tmpx].type == D_WALL)
                                        world[tmpy][tmpx].color = FOREST;
                                if(world[tmpy][tmpx].type == D_FLOOR)
                                        world[tmpy][tmpx].color = 0;*/
                        }

                }
                mapchanged = 1;
                break;
			case 'q':
				goto quit;
				break;
            case KEY_NPAGE:
                player->y+=19;
                py+=19;
            case KEY_DOWN:
			case 'j':
				//py += 10;
				player->y++;
				if(player->y > YSIZE-4)
					player->y = YSIZE-4;
				if(player->y >= (py+(wmaxy/6*5)))
					py++;
				if(py >= YSIZE-wmaxy)
					py = YSIZE-wmaxy-1;
				mapchanged = 1;
                set_explored(player->x, player->y);
                set_explored(player->x-1, player->y);
                set_explored(player->x+1, player->y);
                set_explored(player->x, player->y+1);
                set_explored(player->x+1, player->y+1);
                set_explored(player->x-1, player->y+1);
				break;
            case KEY_PPAGE:
                player->y-=19;
                py-=19;
            case KEY_UP:
			case 'k':
				//py -= 10;
				player->y--;
				if(player->y < 0)
					player->y = 0;
				if(player->y <= (py+(wmaxy/6)))
					py--;
				if(py <= 0)
					py = 0;
				mapchanged = 1;
                set_explored(player->x, player->y);
                set_explored(player->x-1, player->y);
                set_explored(player->x+1, player->y);
                set_explored(player->x, player->y-1);
                set_explored(player->x+1, player->y-1);
                set_explored(player->x-1, player->y-1);
				break;
            case KEY_HOME:
                player->x -= 19;
                px -= 19;
            case KEY_LEFT:
			case 'h':
				//px--;
				player->x--;
				if(player->x < 0)
					player->x = 0;
				if(player->x <= (px+(wmaxx/6)))
					px--;
				if(px <= 0)
					px = 0;
				mapchanged = 1;
                set_explored(player->x, player->y);
                set_explored(player->x, player->y+1);
                set_explored(player->x, player->y-1);
                set_explored(player->x-1, player->y);
                set_explored(player->x-1, player->y-1);
                set_explored(player->x-1, player->y+1);
				break;
            case KEY_END:
                player->x += 19;
                px += 19;
            case KEY_RIGHT:
			case 'l':
				//px++;
				player->x++;
				if(player->x > XSIZE-4)
					player->x = XSIZE-4;
				if(player->x >= (px+(wmaxx/6*5)))
					px++;
				if(px >= XSIZE-wmaxx)
					px = XSIZE-wmaxx-1;
				mapchanged = 1;
                set_explored(player->x, player->y);
                set_explored(player->x, player->y+1);
                set_explored(player->x, player->y-1);
                set_explored(player->x+1, player->y);
                set_explored(player->x+1, player->y-1);
                set_explored(player->x+1, player->y+1);
				break;
            case 'a':
                for(tx=0;tx<XSIZE;tx++)
                        for(ty=0;ty<YSIZE;ty++)
                                set_explored(tx, ty);
                mapchanged=1;
                break;
		}

        set_explored(player->x, player->y);

        check_location();
		if(mapchanged)
			draw_world(px, py, player->x, player->y, wmaxx, wmaxy);

        mapchanged=0;
//		draw_player(player->x, player->y, wmaxx, wmaxy);
		update_info(px,py);
//		wnoutrefresh(wall);
		wnoutrefresh(winfo);
		wnoutrefresh(wstat);
		wnoutrefresh(wmap);
		doupdate();
	}	
quit:
	endwin();
    dump_world();
    save_world("save");
	fclose(debuglog);
    
    for(i=0;i<800;i++) {
            free(test[i]);
    }
    free(test);
	return 0;
}

